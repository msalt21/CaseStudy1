clear;
load COVIDbyCounty.mat

%% User-assigned Variables
min_num_clusters = 9;
max_num_clusters = 18;

%% Import Training Data Set
load trainingData10_3_22.mat


%% Running K Means
k = 9; 

% change this if you want to experinent with different numbers of clusters
[idx,C,sumd,D] = kmeans(trainingData(:,2:end),k,'replicates', 1000);


% might want to experiment with sumd and D variables
% n = number of points/rows in trainingData
% m = dimension of each row vector/columns in trainingData/amount of dates
% k = number of clusters

% idx = assigning each row index to a cluster (n x 1)
% C = matrix containing each centroid as a row vectors (k x m)
% sumd = sum of the distances of each point to their respective cluster
% (ideally want to minimize this) (k x 1)
% D = distances of each point to EVERY centroid (size: n x k)

%% Optimizing K Means

%for k = min_num_clusters:max_num_clusters
%     [idx,C,sumd,D] = kmeans(trainingData(:,2:end),k,'replicates', 1000);
%     silhouette_vals(k) = silhouette(trainingData(:,3:end),trainingData(:,1));
%     figure(k);
%     silhouette(trainingData(:,3:end),trainingData(:,1));   
%     xlim([-1 1]);
% end


%% Making Sense of the Clusters
% - need to assign each cluster to a division
% - possibility - find out which division makes up the majority in each
% cluster

% cancatenates idx to training data, so each row has an assigned cluster
% value
trainingData = [idx trainingData];
% sorts training data according to the cluster values so you can scroll and
% visually see which division regions are part of each cluster
trainingData = sortrows(trainingData, 1);
% see function below
centroidsToDivisions = centroid_division(k, trainingData);
%Make nice table with labels
table_labels = {'Most Common Div', '2nd Most Common Div','3rd Most Common Div' ...
    'Mean', 'FreqMode1', 'FreqMode2', 'FreqMode3','ClusterLength','Freq1ByLength'};
table_initial_clusters = array2table(centroidsToDivisions, 'VariableNames',table_labels);

% This code is for visualizing the results
figure;
silhouette_vals = silhouette(trainingData(:,3:end),trainingData(:,1));
% 
% for clust = 1:k
%     avg_silhouette_val(clust) = mean()
% end

silhouette(trainingData(:,3:end),trainingData(:,1));
xlim([-1 1]);


%% Optimizing Clusters
if any(table_initial_clusters.ClusterLength == 1) 
    %Re-cluster
   
elseif any(table_initial_clusters.Freq1ByLength < 0.8)
    %Re-cluster

end

weighted_Freq1 = table_initial_clusters.Freq1ByLength;

%% Classifying Clusters

%% Bulleted List
% * GOAL: use the training data to optimize the starting centroids in 
% kmeans() for the testing data (or use the clusters and just assign
% testing data points to the nearest neighbor cluster?)
% * might want to pick a better method of assigning the clusters (instead
% of picking most frequent division in each cluster, maybe theres a better
% way?). Also, might want to run kmeans on clusters that have a large
% variety of divisions.


%% FUNCTIONS

% This function assigns centroid numbers to a division based on what
% division makes up the majority of a cluster
% INPUTS: num_clusters (number of clusters, scalor) and data (matrix of
% sorted COVID time series data with cluster assignments in the first row)
% OUTPUT: division_number, a num_clusters x 6 matrix that holds the top 3
% clusters to appear in each cluster in rows 1-3, and the names of those
% clusters in rows 4-6.
function division_number = centroid_division(num_clusters, data)
    x = zeros(num_clusters,3);
        
    % Most common division
    for clust = 1:num_clusters
        subdata = data(data(:,1) == clust, 2);
        [mode1,freqMode1] = mode(subdata);
        x(clust,1) = mode1;
        mean_clust = mean(subdata);
        x(clust,4) = mean_clust;
        x(clust,5) = freqMode1;
        x(clust,8) = size(subdata,1);
      
    end
    % Second most common division
    for clust = 1:num_clusters
        subdata = data(data(:,1) == clust, 2);
        [mode2, freqMode2] = mode(subdata(subdata ~= mode(subdata)));
        x(clust,2) = mode2;
        x(clust,6) = freqMode2;
       
    end
    % Third most common division
    for clust = 1:num_clusters
        subdata = data(data(:,1) == clust, 2);
        first = mode(subdata);
        second = mode(subdata(subdata ~= mode(subdata)));
        [mode3, freqMode3] = mode(subdata(subdata ~= first & ...
            subdata ~= second));
        x(clust,3) = mode3;
        x(clust,7) = freqMode3;
        x(clust,9) = x(clust,5)/x(clust,8);
    end
    % Setting return value
    division_number = x;
end





